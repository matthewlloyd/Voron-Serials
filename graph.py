#!/usr/bin/python3

import datetime
import json
import os

import matplotlib
matplotlib.use('Agg')

import numpy as np
from matplotlib import pyplot as plt
import typer

from constants import BOT_COMMENTS_JSON_FILENAME, SIDEBAR_JSON_FILENAME


def main(dpi: int = 600):
    assert os.path.exists(SIDEBAR_JSON_FILENAME), "Must run fetch_serials.py first"
    serials = json.loads(open(SIDEBAR_JSON_FILENAME, 'r').read())
    assert os.path.exists(BOT_COMMENTS_JSON_FILENAME), "Must run fetch_serials.py first"
    comments = json.loads(open(BOT_COMMENTS_JSON_FILENAME, 'r').read())

    for k in serials.keys():
        serials[k]['serial'] = k
        comments.append(serials[k])

    all_models = set()
    for comment in comments:
        k = comment['serial']
        if len(k.split('.')) != 2:
            continue
        model, num = k.split('.')
        all_models.add(model)

    xs = {}
    ys = {}
    for model in all_models:
        xs[model] = []
        ys[model] = []
        for comment in sorted(comments, key=lambda c: c['created_utc']):
            k = comment['serial']
            if len(k.split('.')) != 2:
                continue
            model2, num = k.split('.')
            if model2 != model:
                continue
            dt = datetime.datetime.fromtimestamp(comment['created_utc'])
            xs[model].append(dt)
            ys[model].append(int(num))

    # remove outliers
    for model in sorted(all_models):
        # sort by date
        ind = np.argsort(xs[model])
        xs[model] = [xs[model][i] for i in ind]
        ys[model] = [ys[model][i] for i in ind]
        use = [True] * len(xs[model])
        cur_y = -1
        for i in range(1, len(xs[model]) - 1):
            if abs(ys[model][i] - ys[model][i-1]) > 10 or abs(ys[model][i] - ys[model][i+1]) > 10:
                use[i] = False
            if abs((xs[model][i] - xs[model][i-1]).days) > 20 or abs((xs[model][i] - xs[model][i+1]).days) > 20:
                use[i] = False
            if ys[model][i] < cur_y:
                use[i] = False
            else:
                cur_y = ys[model][i]
        xs[model] = [xs[model][i] for i in range(len(xs[model])) if use[i]]
        ys[model] = [ys[model][i] for i in range(len(ys[model])) if use[i]]

    plt.figure()
    for model in sorted(all_models):
        plt.plot_date(xs[model], ys[model], label=model, linestyle='-', marker=None)
    plt.grid()
    plt.title('Voron Serials Issued')
    plt.figtext(0.5, 0.01,
                'generated by github.com/matthewlloyd/Voron-Serials',
                ha="center", fontsize=6, color='grey')
    plt.legend()
    plt.savefig('graph_issued.png', dpi=dpi)

    # Compute rates of issuance
    ys_d = {}
    window = 28  # days
    for model in sorted(all_models):
        window_x = xs[model][0]
        window_y = None
        window_i = 0
        good = False
        ys_d[model] = []
        for i in range(len(xs[model])):
            while window_i < i - 1 and (xs[model][i] - window_x).days > window:
                window_i += 1
                window_x = xs[model][window_i]
                window_y = ys[model][window_i]
            if not good and (xs[model][i] - window_x).days >= window:
                good = True
            if window_y is None or not good or (xs[model][i] - window_x).days == 0:
                ys_d[model].append(None)
            else:
                rate = (ys[model][i] - window_y) / (xs[model][i] - window_x).days
                ys_d[model].append(rate)

    plt.figure()
    for model in sorted(all_models):
        plt.plot_date(xs[model], ys_d[model], label=model, linestyle='-', marker=None)
    plt.grid()
    plt.title('Voron Serials Issued Per Day')
    plt.figtext(0.5, 0.01,
                'generated by github.com/matthewlloyd/Voron-Serials',
                ha="center", fontsize=6, color='grey')
    plt.legend()
    plt.savefig('graph_rate.png', dpi=dpi)


if __name__ == '__main__':
    typer.run(main)
